
CMOSMENU_NUM_ITEMS_ICM	EQU	7
CMOSMENU_NUM_ITEMS_OTHER	EQU	4

CMOSMENU_JUMP_TABLE		DW	OFFSET CMOSMENU_BACK_TO_MAINMENU
						DW	OFFSET CMOSMENU_DRIVE_LETTER
						DW	OFFSET CMOSMENU_RESET_CMOS
						DW	OFFSET CMOSMENU_MAKE_ICM_DEFAULT
						DW	OFFSET CMOSMENU_FASTMODE
						DW	OFFSET CMOSMENU_AUTO_RESTORE
						DW	OFFSET CMOSMENU_BACKUP
						DW	OFFSET CMOSMENU_RESTORE


CMOSMENU_ITEMS			DB	"BACK TO MAIN MENU",0
						DB	"DRIVE LETTER ASSIGNMENT",0
						DB	"RESET CMOS",0
						DB	"MAKE MEMORY CARD DEFAULT BOOT DEVICE",0
CMOSMENU_FASTMODE_MENU	DB	"[ ] FAST MODE",0
CMOSMENU_AUTO_RESTORE_MENU	DB	"[ ] AUTO CMOS RESTORE FROM MEMORY CARD",0
						DB  "BACK UP CMOS TO MEMORY CARD NOW",0
						DB	"RESTORE CMOS FROM MEMORY CARD NOW",0
CMOSMENU_ITEMS_END:

CMOSMENU_NUM_ITEMS		DB	CMOSMENU_NUM_ITEMS_OTHER
CMOSMENU_SELECTION		DB	0


CMOSMENU_ERR_CMOS_NOT_BACKEDUP	DB	"CMOS HAS NOT BEEN BACKED UP.",0,0FFH,0FFH
CMOSMENU_CMOS_BACKEDUP	DB	"BACKED UP CMOS.",0,0FFH,0FFH
CMOSMENU_CMOS_RESTORED	DB	"RESTORED CMOS.",0,0FFH,0FFH
CMOSMENU_CMOS_SET_ICM_BOOT_MESSAGE	DB "MEMORY CARD IS DEFAULT BOOT DEVICE NOW.",0,0FFH,0FFH


CMOSMENU				PROC
						MOV		BYTE PTR CS:[CMOSMENU_SELECTION],0

						MOV		BX,CS:[INCOMING_BX]
						AND		BX,0F0FH

						MOV		AL,CMOSMENU_NUM_ITEMS_ICM
						CMP		BL,4		; ICM?
						JE		SHORT CMOSMENU_BOOT_FROM_ICM
						MOV		AL,CMOSMENU_NUM_ITEMS_OTHER

CMOSMENU_BOOT_FROM_ICM:
						MOV		CS:[CMOSMENU_NUM_ITEMS],AL


CMOSMENU_OUTERLOOP:
						CALL	MENU_WAIT_PAD_RELEASE
						CALL	CLEAR_FIVE_BELOW
						CALL	CMOSMENU_UPDATE_MENU

						MOVZX	CX,CS:[CMOSMENU_NUM_ITEMS]
						MOV		SI,OFFSET CMOSMENU_ITEMS
						CALL	DRAWMENU2

CMOSMENU_INNER_LOOP:
						MOVZX	CX,CS:[CMOSMENU_NUM_ITEMS]
						MOV		AL,CS:[CMOSMENU_SELECTION]
						CALL	DRAWARROW

CMOSMENU_WAIT_PAD:
						CALL	READ_PADA
						CMP		AL,3FH
						JE		CMOSMENU_WAIT_PAD

						; Input
						;   AL Pad
						;   AH Current Selection
						;   CH Number of Choices
						; Output
						;   AH New Selection
						MOV		AH,CS:[CMOSMENU_SELECTION]
						MOV		CH,CS:[CMOSMENU_NUM_ITEMS]
						CALL	MOVE_ARROW_BY_PAD
						MOV		CS:[CMOSMENU_SELECTION],AH

						AND		AL,30H
						CMP		AL,30H
						JE		CMOSMENU_INNER_LOOP

						MOVZX	BX,CS:[CMOSMENU_SELECTION]
						SHL		BX,1
						JMP		CS:[CMOSMENU_JUMP_TABLE+BX]



CMOSMENU_DRIVE_LETTER:
						CALL	DRVMENU
						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_RESET_CMOS:
						CALL	CMOSRESET_CONFIRM
						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_MAKE_ICM_DEFAULT:
						MOV		DX,IO_CMOS_BOOTDEVICE_SET ; 3180H
						IN		AL,DX
						OR		AL,1
						OUT		DX,AL

						MOV		DX,IO_CMOS_BOOTDEVICE ; 3182H
						MOV		AL,4
						OUT		DX,AL

						MOV		DX,IO_CMOS_BOOTUNIT ; 3184H
						XOR		AL,AL
						OUT		DX,AL

						MOV		SI,OFFSET CMOSMENU_CMOS_SET_ICM_BOOT_MESSAGE
						CALL	SHOW_MESSAGE_WAIT

						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_FASTMODE:
						MOV		DX,IO_CMOS_FASTMODE
						IN		AL,DX
						AND		AL,1
						SUB		AL,1
						NEG		AL
						OUT		DX,AL
						CALL	RECONFIGURE_FASTMODE
						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_AUTO_RESTORE:
						CMP		BYTE PTR CS:[CMOS_BACKED_UP],0
						JE		SHORT CMOSMENU_CMOS_NOT_BACKEDUP_ERROR

CMOSMENU_AUTO_RESTORE_TOGGLE:
						MOV		AL,1
						MOV		DI,OFFSET AUTO_CMOS_RESTORE
						SUB		AL,CS:[DI]
						CALL	ICM_WRITE_SETTING_AL
						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_BACKUP:
						CALL	DO_BACKUP_CMOS

						MOV		DI,OFFSET CMOS_BACKED_UP
						MOV		AL,1
						CALL	ICM_WRITE_SETTING_AL

						MOV		SI,OFFSET CMOSMENU_CMOS_BACKEDUP
						CALL	SHOW_MESSAGE_WAIT

						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_RESTORE:
						CMP		BYTE PTR CS:[CMOS_BACKED_UP],0
						JNE		CMOSMENU_RESTORE_GO

CMOSMENU_CMOS_NOT_BACKEDUP_ERROR:
						MOV		SI,OFFSET CMOSMENU_ERR_CMOS_NOT_BACKEDUP
						CALL	SHOW_MESSAGE_WAIT
						JMP		CMOSMENU_OUTERLOOP

CMOSMENU_RESTORE_GO:
						CALL	DO_RESTORE_CMOS

						MOV		SI,OFFSET CMOSMENU_CMOS_RESTORED
						CALL	SHOW_MESSAGE_WAIT

						JMP		CMOSMENU_OUTERLOOP



CMOSMENU_BACK_TO_MAINMENU:
						RET

CMOSMENU				ENDP



CMOSMENU_UPDATE_MENU	PROC
						MOV		AL,' '
						CMP		BYTE PTR CS:[AUTO_CMOS_RESTORE],0
						JE		CMOSMENU_UPDATE_AUTO_RESTORE
						MOV		AL,'X'
CMOSMENU_UPDATE_AUTO_RESTORE:
						MOV		CS:[CMOSMENU_AUTO_RESTORE_MENU+1],AL


						MOV		DX,IO_CMOS_FASTMODE
						IN		AL,DX
						MOV		AH,' '
						OR		AL,AL
						JE		CMOSMENU_UPDATE_MENU_NOT_FASTMODE
						MOV		AH,'X'
CMOSMENU_UPDATE_MENU_NOT_FASTMODE:
						MOV		CS:[CMOSMENU_FASTMODE_MENU+1],AH

						RET
CMOSMENU_UPDATE_MENU	ENDP



; Based on AB.COM source:
;             Normal    FAST
;   model 1/2   3/6      2/?
;   1F/2F       3/6      1/?
;   10F/20F     3/6      0/3
;   UX?         0/3      0/3?
;   CX and newer, use 05ECh
SET_FASTMODE			PROC
						MOV		CS:[CMOSMENU_FASTMODE_MENU+1],'X'

						MOV		DX,IO_CMOS_FASTMODE
						MOV		AL,1
						OUT		DX,AL

						MOV		DX,IO_SPEED_CONTROL
						IN		AL,DX
						TEST	AL,80H
						JNE		SHORT SET_FASTMODE_OLDER
						MOV		AL,1
						OUT		DX,AL
						RET

SET_FASTMODE_OLDER:
						MOV		AL,31H
						CMP		AL,020H
						JE		SHORT SET_FASTMODE_MODEL2
						CMP		AL,040H
						JE		SHORT SET_FASTMODE_2F
						CMP		AL,040H
						JE		SHORT SET_FASTMODE_20F
						RET

SET_FASTMODE_MODEL2:
						MOV		DX,IO_1STGEN_MAINRAM_WAIT
						MOV		AL,2
						OUT		DX,AL
						RET
SET_FASTMODE_2F:
						MOV		AL,1
						MOV		DX,IO_1STGEN_MAINRAM_WAIT
						OUT		DX,AL
						MOV		DX,IO_2NDGEN_MAINRAM_WAIT
						OUT		DX,AL
						RET
SET_FASTMODE_20F:
						XOR		AL,AL
						MOV		DX,IO_1STGEN_MAINRAM_WAIT
						OUT		DX,AL
						MOV		DX,IO_2NDGEN_MAINRAM_WAIT
						OUT		DX,AL
						MOV		AL,3
						MOV		DX,IO_3RDGEN_VRAM_WAIT
						OUT		DX,AL
						RET
SET_FASTMODE			ENDP



SET_SLOWMODE			PROC
						MOV		CS:[CMOSMENU_FASTMODE_MENU+1],' '

						MOV		DX,IO_CMOS_FASTMODE
						XOR		AL,AL
						OUT		DX,AL

						MOV		DX,IO_SPEED_CONTROL
						IN		AL,DX
						TEST	AL,80H
						JNE		SHORT SET_SLOWMODE_OLDER
						MOV		AL,0
						OUT		DX,AL
						RET

SET_SLOWMODE_OLDER:
						MOV		AL,31H
						CMP		AL,020H
						JE		SHORT SET_SLOWMODE_MODEL2
						CMP		AL,040H
						JE		SHORT SET_SLOWMODE_2F
						CMP		AL,040H
						JE		SHORT SET_SLOWMODE_20F
						RET

SET_SLOWMODE_MODEL2:
						MOV		DX,IO_1STGEN_MAINRAM_WAIT
						MOV		AL,3
						OUT		DX,AL
						RET
SET_SLOWMODE_2F:
						MOV		AL,3
						MOV		DX,IO_1STGEN_MAINRAM_WAIT
						OUT		DX,AL
						MOV		DX,IO_2NDGEN_MAINRAM_WAIT
						OUT		DX,AL
						RET
SET_SLOWMODE_20F:
						MOV		AL,3
						MOV		DX,IO_1STGEN_MAINRAM_WAIT
						OUT		DX,AL
						MOV		DX,IO_2NDGEN_MAINRAM_WAIT
						OUT		DX,AL
						MOV		AL,6
						MOV		DX,IO_3RDGEN_VRAM_WAIT
						OUT		DX,AL
						RET
SET_SLOWMODE			ENDP

RECONFIGURE_FASTMODE	PROC
						MOV		DX,IO_CMOS_FASTMODE
						IN		AL,DX
						OR		AL,AL
						JE		SET_SLOWMODE
						JMP		SET_FASTMODE
RECONFIGURE_FASTMODE	ENDP



; DI	OFFSET
; AL	Value
; Needs to be WORD access.
; To be safe, DWORD access, which has been confirmed to work.
; Writes to both FRAM and the Config Area
ICM_WRITE_SETTING_AL	PROC
						PUSH	FS
						PUSH	DI
						PUSH	CX
						PUSH	EAX
						PUSH	EDX

						MOV		CS:[DI],AL	; Write to own config area.

						MOV		CL,AL

						; Input
						;	AL     Which segment selector:
						;			bit0:DS
						;			bit1:ES
						;			bit2:FS
						;			bit3:GS
						;   EDX    Physical Address
						MOV		AL,4	; Bit2=FS
						MOV		EDX,ICM_LOADER_TOP
						CALL	GET_UNREALMODE_SEG

						MOV		BX,DI
						AND		BX,3
						AND		DI,0FFFCH

						MOV		EAX,FS:[DI]
						PUSH	EAX
						ADD		BX,SP
						MOV		SS:[BX],CL
						POP		EAX

						MOV		FS:[DI],EAX

						POP		EDX
						POP		EAX
						POP		CX
						POP		DI
						POP		FS
						RET
ICM_WRITE_SETTING_AL	ENDP



; SI Text Message Pointer
SHOW_MESSAGE_WAIT		PROC
						PUSH	SI
						CALL	MENU_WAIT_PAD_RELEASE
						CALL	CLEAR_FIVE_BELOW
						POP		SI

						MOV		AX,050AH
						CALL	DRAW_TEXT
@@:
						CALL	READ_PADA
						CMP		AL,3FH
						JE		@b

						RET
SHOW_MESSAGE_WAIT		ENDP



DO_BACKUP_CMOS			PROC
						PUSH	DS
						PUSH	ES

						; Input
						;	AL     Which segment selector:
						;			bit0:DS
						;			bit1:ES
						;			bit2:FS
						;			bit3:GS
						;   EDX    Physical Address
						MOV		AL,2	; Bit1=ES
						MOV		EDX,ICM_CMOS_BACKUP_PHYSADDR
						CALL	GET_UNREALMODE_SEG


						CALL	MAP_CMOS_D8000
						PUSH	AX

						MOV		DI,0D800H
						MOV		DS,DI
						XOR		SI,SI
						XOR		DI,DI
						MOV		CX,2000H/4
@@:
						LODSB	; CMOS RAM Mapped to 0D8000h is byte-access only.  Confirmed.
						ROR		EAX,8
						LODSB
						ROR		EAX,8
						LODSB
						ROR		EAX,8
						LODSB
						ROR		EAX,8
						STOSD
						LOOP	@b

						POP		AX
						CALL	RESTORE_D8000_MAPPING

						POP		ES
						POP		DS
						RET
DO_BACKUP_CMOS			ENDP


DO_RESTORE_CMOS			PROC
						PUSH	DS
						PUSH	ES

						; Input
						;	AL     Which segment selector:
						;			bit0:DS
						;			bit1:ES
						;			bit2:FS
						;			bit3:GS
						;   EDX    Physical Address
						MOV		AL,1	; Bit0=DS
						MOV		EDX,ICM_CMOS_BACKUP_PHYSADDR
						CALL	GET_UNREALMODE_SEG

						CALL	MAP_CMOS_D8000
						PUSH	AX

						MOV		DI,0D800H
						MOV		ES,DI
						XOR		SI,SI
						XOR		DI,DI
						MOV		CX,2000H/4
@@:
						LODSD	; CMOS RAM Mapped to 0D8000h is byte-access only.  Confirmed.
						STOSB
						ROR		EAX,8
						STOSB
						ROR		EAX,8
						STOSB
						ROR		EAX,8
						STOSB
						LOOP	@b

						POP		AX
						CALL	RESTORE_D8000_MAPPING

						CALL	RECONFIGURE_FASTMODE

						POP		ES
						POP		DS
						RET
DO_RESTORE_CMOS			ENDP



RESTORE_CMOS_IF_AUTOCMOS_IS_SET	PROC
						CMP		CS:[AUTO_CMOS_RESTORE],0
						JNE		DO_RESTORE_CMOS
						RET
RESTORE_CMOS_IF_AUTOCMOS_IS_SET	ENDP
