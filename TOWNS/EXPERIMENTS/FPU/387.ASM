				.386p
				.387

				PUBLIC	RUN387
				PUBLIC	TBYTE_TO_QWORD

				ASSUME	CS:CODE,DS:DATA

; Not testing:
;   FDECSTP
;   FFREE
;   FICOM
;   FINCSTP
;   FSTCW (Test not crash only)
;   FLDCW (Test not crash only)
;   FSTENV (Test not crash only)
;   FLDENV (Test not crash only)
;   FRESTORE
;   FSAVE
;   FXTRACT

PUSH_RESULT		MACRO
				FWAIT
				FST		QWORD PTR DS:[EDI]
				FST		DWORD PTR DS:[ESI]
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDI,8
				ADD		ESI,4
				ADD		EDX,10
				ENDM

FILD_imm32		MACRO	NUM
				PUSH	DWORD PTR NUM
				FILD	DWORD PTR SS:[ESP]
				ADD		ESP,4
				ENDM

FILD_imm16		MACRO	NUM
				PUSH	DWORD PTR NUM
				FILD	WORD PTR SS:[ESP]
				ADD		ESP,4
				ENDM

ZERO_DIVISION	MACRO
				FLD1
				FLDZ
				FDIVP	ST(1),ST
				ENDM

FPOP			MACRO
				FSTP	ST(0)
				ENDM


DATA			SEGMENT

FLOAT_TWO		DD		0
DOUBLE_TWO		DQ		0
TBYTE_TWO		DT		0

FLOAT_FOUR		DD		0
DOUBLE_FOUR		DQ		0
TBYTE_FOUR		DT		0

FLOAT_HALF		DD		0
DOUBLE_HALF		DQ		0
TBYTE_HALF		DT		0

FLOAT_QUARTER	DD		0
DOUBLE_QUARTER	DQ		0
TBYTE_QUARTER	DT		0

FLOAT_TENTH		DD		0
DOUBLE_TENTH	DQ		0
TBYTE_TENTH		DT		0

BCD_SAMPLE		DT		12345678H


INT_ZERO		DD		0
SHORT_ZERO		DW		0

INT_ONE			DD		1
SHORT_ONE		DW		1

INT_TWO			DD		2
SHORT_TWO		DW		2

INT_THREE		DD		3
SHORT_THREE		DW		3

INT_FOUR		DD		4
SHORT_FOUR		DW		4

INT_TEN			DD		10
SHORT_TEN		DW		10

INT_HUNDRED		DD		100
SHORT_HUNDRED	DW		100

DATA			ENDS


CODE			SEGMENT

; RUN387(int *int_data,float *float_data,double *double_data);
RUN387			PROC
				PUSH	EBP
				MOV		EBP,ESP
				SUB		ESP,32

				PUSHAD

				MOV		EBX,[EBP+8]	; EBX=int_data
				MOV		ESI,[EBP+12]	; ESI=float_data
				MOV		EDI,[EBP+16]	; EDI=double_data
				MOV		EDX,[EBP+20]	; EDX=data_80bit

				FNINIT  ;  Control Word<-037FH, Status Word clear, Stack Empty

				FNOP
				FSETPM
				FNENI
				FNDISI


				; At least should not crash
				FSTCW	SS:[EBP-16]
				FLDCW	SS:[EBP-16]
				FSTSW	SS:[EBP-16]
				FSTSW	AX
				FSTENV	SS:[EBP-32]
				FLDENV	SS:[EBP-32]

				FILD_imm32 1
				FTST
				FPOP



				; *** FLD1,FLDL2T,FLDPI,FLDLG2,FLDLN2,FLDZ *** (6 output)
				FLD1
				FLDL2T
				FLDPI
				FLDLG2
				FLDLN2
				FLDZ

				FST		QWORD PTR DS:[EDI]
				FSTP	DWORD PTR DS:[ESI]
				ADD		EDI,8
				ADD		ESI,4

				FST		DWORD PTR DS:[ESI]
				FSTP	QWORD PTR DS:[EDI]
				ADD		EDI,8
				ADD		ESI,4

				FST		QWORD PTR DS:[EDI]
				FSTP	DWORD PTR DS:[ESI]
				ADD		EDI,8
				ADD		ESI,4

				FST		DWORD PTR DS:[ESI]
				FSTP	QWORD PTR DS:[EDI]
				ADD		EDI,8
				ADD		ESI,4

				FST		QWORD PTR DS:[EDI]
				FSTP	DWORD PTR DS:[ESI]
				ADD		EDI,8
				ADD		ESI,4

				FST		DWORD PTR DS:[ESI]
				FSTP	QWORD PTR DS:[EDI]
				ADD		EDI,8
				ADD		ESI,4


				FLD1
				FLDL2T
				FLDPI
				FLDLG2
				FLDLN2
				FLDZ
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDX,10
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDX,10
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDX,10
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDX,10
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDX,10
				FSTP	TBYTE PTR DS:[EDX]
				ADD		EDX,10

				FWAIT



				; *** F2XM1 *** (1 output)
				FLD1
				FILD_imm16	2
				FDIVP	ST(1),ST
				F2XM1
				PUSH_RESULT



				; *** FABS *** (1 output)
				FILD_imm32 -65536
				FABS
				PUSH_RESULT



				; *** FADD/FADDP/FIADD (5 output)

				; Make Twos

				FLD1
				FLD1
				FADDP	ST(1),ST
				FWAIT

				FST		DS:[FLOAT_TWO]
				FST		DS:[DOUBLE_TWO]
				FSTP	DS:[TBYTE_TWO]

				; Make Fours

				FLD		DS:[FLOAT_TWO]
				FADD	DS:[FLOAT_TWO]
				FWAIT
				FSTP	DS:[FLOAT_FOUR]

				FLD		DS:[DOUBLE_TWO]
				FADD	DS:[DOUBLE_TWO]
				FWAIT
				FSTP	DS:[DOUBLE_FOUR]

				FLD		DS:[TBYTE_TWO]
				FLD		DS:[TBYTE_TWO]
				FADDP	ST(1),ST
				FWAIT
				FSTP	DS:[TBYTE_FOUR]

				; Store Twos and Fours

				FLD		DS:[TBYTE_FOUR]
				FLD		DS:[TBYTE_TWO]

				PUSH_RESULT
				PUSH_RESULT

				FILD	DS:[INT_ZERO]
				FIADD	DS:[INT_ONE]
				FWAIT
				FIADD	DS:[INT_TWO]
				FWAIT
				FIADD	DS:[INT_THREE]
				FWAIT
				FIADD	DS:[INT_FOUR]
				FWAIT

				PUSH_RESULT

				FILD	DS:[SHORT_ZERO]
				FIADD	DS:[SHORT_ONE]
				FWAIT
				FIADD	DS:[SHORT_TWO]
				FWAIT
				FIADD	DS:[SHORT_THREE]
				FWAIT
				FIADD	DS:[SHORT_FOUR]
				FWAIT

				PUSH_RESULT

				FILD	DS:[INT_TEN]
				FILD	DS:[INT_HUNDRED]
				FADD	ST(1),ST
				FWAIT
				FPOP

				PUSH_RESULT



				; *** FBLD *** (1 output)
				FBLD	DS:[BCD_SAMPLE]
				PUSH_RESULT



				; *** FBSTP ***
				FILD_imm32 87654321
				FBSTP	TBYTE PTR DS:[EBX]
				ADD		EBX,12 ; It returns 10 bytes, but align 4-byte border



				; *** FCHS *** (2 output)
				FILD_imm16 100
				FCHS
				PUSH_RESULT

				FILD_imm16 -100
				FCHS
				PUSH_RESULT



				; *** FCLEX ***
				FCLEX

				ZERO_DIVISION
				FSTSW	WORD PTR DS:[EBX] ; Division by zero

				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]
				FSTP	DWORD PTR SS:[EBP-4]

				FSTSW	WORD PTR DS:[EBX+2] ; Division by zero

				FSTSW	AX
				MOV		DS:[EBX+4],AX

				FCLEX
				FSTSW	WORD PTR DS:[EBX+6]

				ADD		EBX,8



				; *** FCOM/FCOMP/FCOMPP ***
				ZERO_DIVISION	; NaN is at ST(0)

				FCOM	DS:[FLOAT_TWO]
				FSTSW	WORD PTR DS:[EBX]

				FCOM	DS:[DOUBLE_FOUR]
				FSTSW	WORD PTR DS:[EBX+2]

				FSTP	DWORD PTR SS:[EBP-4]

				FILD_imm16	10
				FILD_imm16	20
				FCOM	ST(1)
				FSTSW	WORD PTR DS:[EBX+4]

				FCOMP	DS:[FLOAT_TWO]
				FSTSW	WORD PTR DS:[EBX+6]

				FCOMP	DS:[DOUBLE_TWO]
				FSTSW	WORD PTR DS:[EBX+8]

				FILD_imm16	10
				FILD_imm16	-10
				FCOMP	ST(1)
				FSTSW	WORD PTR DS:[EBX+10]

				ADD		EBX,12



				; *** FCOS *** (12 output)
				MOV		ECX,0
FCOS_LOOP:
				PUSH	ECX
				FILD	DWORD PTR SS:[ESP]
				POP		ECX
				FILD_imm16	6
				FDIVP	ST(1),ST
				FWAIT
				FLDPI
				FMULP	ST(1),ST
				FWAIT
				FCOS
				FWAIT
				PUSH_RESULT	; Output is 0.866025 (cos(PI/6))

				INC		ECX
				CMP		ECX,12
				JL		FCOS_LOOP



				; *** FDIV/FDIVP,FIDIV *** (7 output)

				FLD1
				FILD	DS:[INT_TWO]
				FDIVP	ST(1),ST
				FWAIT
				FST		DS:[FLOAT_HALF]
				FST		DS:[DOUBLE_HALF]
				FSTP	DS:[TBYTE_HALF]

				FILD	DS:[INT_FOUR]
				FLD1
				FDIV	ST,ST(1)
				FWAIT
				FST		DS:[FLOAT_QUARTER]
				FST		DS:[DOUBLE_QUARTER]
				FSTP	DS:[TBYTE_QUARTER]

				; Still ST(0) is 4
				FIADD	DS:[INT_THREE]
				FIADD	DS:[INT_THREE]	; Make it 10
				FLD1
				FXCH	ST(1)	; ST(0) is 10, ST(1) is 1
				FDIV	ST(1),ST	; ST(0) is 10, ST(1) is 0.1
				FWAIT
				FXCH	ST(1)
				FST		DS:[FLOAT_TENTH]
				FST		DS:[DOUBLE_TENTH]
				FSTP	DS:[TBYTE_TENTH]

				FSTP	ST(0)	; Essentially FPOP


				FLD		DS:[FLOAT_TENTH]
				FLD		DS:[DOUBLE_TENTH]
				FLD		DS:[TBYTE_TENTH]

				FSTP	TBYTE PTR DS:[EDX]
				FSTP	QWORD PTR DS:[EDI]
				FSTP	DWORD PTR DS:[ESI]
				ADD		EDI,8
				ADD		ESI,4
				ADD		EDX,10

				FLD		DS:[FLOAT_HALF]
				FLD		DS:[DOUBLE_HALF]
				FLD		DS:[TBYTE_HALF]

				FSTP	TBYTE PTR DS:[EDX]
				FSTP	QWORD PTR DS:[EDI]
				FSTP	DWORD PTR DS:[ESI]
				ADD		EDI,8
				ADD		ESI,4
				ADD		EDX,10

				FLD		DS:[FLOAT_QUARTER]
				FLD		DS:[DOUBLE_QUARTER]
				FLD		DS:[TBYTE_QUARTER]

				FSTP	TBYTE PTR DS:[EDX]
				FSTP	QWORD PTR DS:[EDI]
				FSTP	DWORD PTR DS:[ESI]
				ADD		EDI,8
				ADD		ESI,4
				ADD		EDX,10

				FLD1
				FDIV	DS:[FLOAT_TWO]
				FWAIT
				FLD1
				FDIV	DS:[DOUBLE_TWO]
				FWAIT
				FLD1
				FIDIV	DS:[INT_TWO]
				FWAIT
				FLD1
				FIDIV	DS:[SHORT_TWO]
				FWAIT

				PUSH_RESULT
				PUSH_RESULT
				PUSH_RESULT
				PUSH_RESULT



				; *** FDIVR/FDIVPR/FIDIVR (7 output)
				FILD_imm16	256
				FSTP	DWORD PTR SS:[EBP-16]
				FILD_imm16	10
				FDIVR	DWORD PTR SS:[EBP-16] ; ST=256/10
				PUSH_RESULT

				FILD_imm16	512
				FSTP	QWORD PTR SS:[EBP-16]
				FILD_imm16	16
				FDIVR	QWORD PTR SS:[EBP-16] ; ST=512/16
				PUSH_RESULT

				FILD_imm16	999
				FILD_imm16	33
				FDIVR	ST,ST(1)	; ST=ST(i)/ST=999/33=30.27272727
				PUSH_RESULT
				FSTP	DWORD PTR SS:[EBP-16]

				FILD_imm16	-5
				FILD_imm16	-3885
				FDIVR	ST(1),ST
				FSTP	DWORD PTR SS:[EBP-16]
				PUSH_RESULT

				FILD_imm16	-5
				FILD_imm16	-3885
				FDIVRP	ST(1),ST
				PUSH_RESULT

				FILD_imm16 5
				MOV		DWORD PTR SS:[EBP-16],3885
				FIDIVR	DWORD PTR SS:[EBP-16]
				PUSH_RESULT

				FILD_imm16 5
				MOV		WORD PTR SS:[EBP-16],3885
				FIDIVR	WORD PTR SS:[EBP-16]
				PUSH_RESULT



				; *** FIST/FISTP ***
				FILD_imm32 80000000H
				FILD_imm16 4096
				FILD_imm16 256
				FILD_imm16 16
				FILD_imm16 1
				FIST	WORD PTR DS:[EBX]
				FSTP	DWORD PTR SS:[EBP-16]
				FIST	DWORD PTR DS:[EBX+4]
				FSTP	DWORD PTR SS:[EBP-16]
				FISTP	WORD PTR DS:[EBX+8]
				FISTP	DWORD PTR DS:[EBX+12]
				FISTP	QWORD PTR DS:[EBX+16]
				ADD		EBX,24



				; *** FLD *** (1 output)
				FILD_imm16 16
				FSTP	QWORD PTR SS:[EBP-16]
				FLD		QWORD PTR SS:[EBP-16]
				FLD		ST(0)
				FMUL	ST,ST(1)
				PUSH_RESULT
				FSTP	QWORD PTR SS:[EBP-16]



				; *** FMUL/FMULP/FIMUL *** (7 output)
				FILD_imm16	-4096
				FILD_imm16	16
				FSTP	DWORD PTR SS:[EBP-16]
				FMUL	DWORD PTR SS:[EBP-16] ; FMUL m32real
				FWAIT
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT   ; Output -6553.6

				FILD_imm16	-4096
				FILD_imm16	16
				FSTP	QWORD PTR SS:[EBP-16]
				FMUL	QWORD PTR SS:[EBP-16]  ; FMUL m64real
				FWAIT
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT

				FILD_imm16	-4096
				FILD_imm16	16
				FMUL	ST,ST(1)
				FWAIT
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT

				FILD_imm16	16
				FMUL	ST(1),ST
				FSTP	DWORD PTR SS:[EBP-16]
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT

				FILD_imm16	-4096
				FILD_imm16	16
				FMULP	ST(1),ST
				FWAIT
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT

				FILD_imm16	-4096
				MOV		DWORD PTR SS:[EBP-16],16
				FIMUL	DWORD PTR SS:[EBP-16]
				FWAIT
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT

				FILD_imm16	-4096
				MOV		WORD PTR SS:[EBP-16],16
				FIMUL	WORD PTR SS:[EBP-16]
				FWAIT
				FMUL	QWORD PTR DS:[DOUBLE_TENTH]
				FWAIT
				PUSH_RESULT



				; *** FPATAN *** (8 output)
				FILD_imm16	0	;Y
				FILD_imm16	100	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	100	;Y
				FILD_imm16	100	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	100	;Y
				FILD_imm16	0	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	100	;Y
				FILD_imm16	-100	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	0	;Y
				FILD_imm16	-100	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	-100	;Y
				FILD_imm16	-100	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	-100	;Y
				FILD_imm16	0	;X
				FPATAN
				PUSH_RESULT

				FILD_imm16	-100	;Y
				FILD_imm16	100	;X
				FPATAN
				PUSH_RESULT



				; *** FPREM *** (1 output)
				FLD		DWORD PTR DS:[FLOAT_HALF]
				FLDPI
				FPREM
				PUSH_RESULT
				FPOP



				; *** FPREM1 *** (1 output)
				FLD		DWORD PTR DS:[FLOAT_HALF]
				FLDPI
				FPREM1
				PUSH_RESULT
				FPOP



				; *** FPTAN *** (5 output)
				FLDPI
				FILD_imm16 -3
				FDIVP	ST(1),ST
				FPTAN
				FWAIT
				FPOP
				PUSH_RESULT

				FLDPI
				FILD_imm16 -4
				FDIVP	ST(1),ST
				FPTAN
				FWAIT
				FPOP
				PUSH_RESULT

				FLDZ
				FPTAN
				FWAIT
				FPOP
				PUSH_RESULT

				FLDPI
				FILD_imm16 4
				FDIVP	ST(1),ST
				FPTAN
				FWAIT
				FPOP
				PUSH_RESULT

				FLDPI
				FILD_imm16 3
				FDIVP	ST(1),ST
				FPTAN
				FWAIT
				FPOP
				PUSH_RESULT



				; *** FRNDINT *** (16 output)
				; Rounding Control bits:
				; CW&0C00H
				;   00:Nearest or Even
				;   01:Round down
				;   10:Round up
				;   11:Truncate toward zero
				FSTCW	SS:[EBP-16]
				MOV		CX,0
FRNDINT_LOOP:
				MOV		AX,SS:[EBP-16]
				AND		AX,0F3FFH
				OR		AX,CX
				MOV		SS:[EBP-16],AX
				FLDCW	SS:[EBP-16]

				FILD_imm16	199
				FILD_imm16	100
				FDIVP	ST(1),ST
				FRNDINT
				PUSH_RESULT

				FILD_imm16	-199
				FILD_imm16	100
				FDIVP	ST(1),ST
				FRNDINT
				PUSH_RESULT

				FILD_imm16	201
				FILD_imm16	100
				FDIVP	ST(1),ST
				FRNDINT
				PUSH_RESULT

				FILD_imm16	-201
				FILD_imm16	100
				FDIVP	ST(1),ST
				FRNDINT
				PUSH_RESULT

				ADD		CX,0400H
				CMP		CX,1000H
				JNE		FRNDINT_LOOP

				MOV		AX,SS:[EBP-16]
				AND		AX,0F3FFH   ; Reset to Nearest
				MOV		SS:[EBP-16],AX
				FLDCW	SS:[EBP-16]



				; *** FSCALE *** (2 output)
				FILD_imm16 12
				FLD1
				FSCALE
				PUSH_RESULT

				FILD_imm16 8
				FLD1
				FSCALE
				PUSH_RESULT



				; *** FSIN *** (12 output)
				MOV		ECX,0
FSIN_LOOP:
				PUSH	ECX
				FILD	DWORD PTR SS:[ESP]
				POP		ECX
				FILD_imm16	6
				FDIVP	ST(1),ST
				FWAIT
				FLDPI
				FMULP	ST(1),ST
				FWAIT
				FSIN
				FWAIT
				PUSH_RESULT	; Output is 0.866025 (SIN(PI/6))

				INC		ECX
				CMP		ECX,12
				JL		FSIN_LOOP



				; *** FSINCOS *** (24 output)
				MOV		ECX,0
FSINCOS_LOOP:
				PUSH	ECX
				FILD	DWORD PTR SS:[ESP]
				POP		ECX
				FILD_imm16	6
				FDIVP	ST(1),ST
				FWAIT
				FLDPI
				FMULP	ST(1),ST
				FWAIT
				FSINCOS
				FWAIT
				PUSH_RESULT
				PUSH_RESULT

				INC		ECX
				CMP		ECX,12
				JL		FSINCOS_LOOP



				; *** FSQRT *** (11 output)
				MOV		ECX,0
FSQRT_LOOP:
				PUSH	ECX
				FILD	DWORD PTR SS:[ESP]
				POP		ECX
				FILD_imm16 10
				FDIVP	ST(1),ST
				FWAIT
				FMUL	ST,ST(0)
				FWAIT
				FSQRT
				FWAIT
				PUSH_RESULT

				ADD		ECX,2
				CMP		ECX,20
				JLE		FSQRT_LOOP



				; *** FSUB/FSUBP/FISUB *** (7 output)
				FILD_imm16	10
				FSUB	DWORD PTR DS:[FLOAT_QUARTER]
				PUSH_RESULT

				FILD_imm16	5
				FSUB	QWORD PTR DS:[DOUBLE_HALF]
				PUSH_RESULT

				FILD_imm16	100
				FILD_imm16	200
				FSUB	ST,ST(1)
				PUSH_RESULT

				FILD_imm16	50
				FSUB	ST(1),ST
				FPOP
				PUSH_RESULT

				FILD_imm32  500000
				FILD_imm32  400000
				FSUBP	ST(1),ST
				PUSH_RESULT
				FPOP

				PUSH	DWORD PTR 1234
				FLD		DS:[DOUBLE_TENTH]
				FISUB	DWORD PTR SS:[ESP]
				PUSH_RESULT

				FLD		DS:[DOUBLE_TENTH]
				FISUB	WORD PTR SS:[ESP]
				PUSH_RESULT

				FPOP
				ADD		ESP,4



				; *** FSUBR/FSUBPR/FISUBR *** (7 output)
				FILD_imm16	10
				FSUBR	DWORD PTR DS:[FLOAT_QUARTER]
				PUSH_RESULT

				FILD_imm16	5
				FSUBR	QWORD PTR DS:[DOUBLE_HALF]
				PUSH_RESULT

				FILD_imm16	100
				FILD_imm16	200
				FSUBR	ST,ST(1)
				PUSH_RESULT

				FILD_imm16	50
				FSUBR	ST(1),ST
				FPOP
				PUSH_RESULT

				FILD_imm32  500000
				FILD_imm32  400000
				FSUBRP	ST(1),ST
				PUSH_RESULT
				FPOP

				PUSH	DWORD PTR 1234
				FLD		DS:[DOUBLE_TENTH]
				FISUBR	DWORD PTR SS:[ESP]
				PUSH_RESULT

				FLD		DS:[DOUBLE_TENTH]
				FISUBR	WORD PTR SS:[ESP]
				PUSH_RESULT

				FPOP
				ADD		ESP,4



				; *** FUCOM/FUCOMP/FUCOMPP ***
				FILD_imm32 1000000
				FILD_imm32 1000000
				FILD_imm32 1000000
				FUCOM	ST(2)

				FUCOMP	ST(2)

				FUCOMPP



				; *** FXAM ***
				FILD_imm32	100000000
				FXAM
				FPOP



				; *** FYL2X *** (1 output)
				FILD_imm32	100000
				FILD_imm16	256
				FYL2X
				PUSH_RESULT



				; *** FYL2XP1 *** (1 output)
				FILD_imm32	100000
				FLD		DS:[DOUBLE_TENTH]
				FYL2XP1
				PUSH_RESULT



				POPAD
				MOV		ESP,EBP
				POP		EBP

				RET

RUN387			ENDP


; extern TBYTE_TO_QWORD(double *qword_ptr,const unsigned char *tbyte_ptr);
TBYTE_TO_QWORD	PROC
				MOV		EAX,SS:[ESP+8]
				FLD		TBYTE PTR DS:[EAX]
				MOV		EAX,SS:[ESP+4]
				FSTP	QWORD PTR DS:[EAX]
				RET
TBYTE_TO_QWORD	ENDP


CODE			ENDS
				END
